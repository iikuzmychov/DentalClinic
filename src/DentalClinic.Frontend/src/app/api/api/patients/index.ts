/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createAddPatientResponseFromDiscriminatorValue, createHttpValidationProblemDetailsFromDiscriminatorValue, createListPatientsResponseFromDiscriminatorValue, serializeAddPatientRequest, serializeAddPatientResponse, type AddPatientRequest, type AddPatientResponse, type HttpValidationProblemDetails, type ListPatientsResponse } from '../../models/index.js';
// @ts-ignore
import { PatientsItemRequestBuilderRequestsMetadata, type PatientsItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/patients
 */
export interface PatientsRequestBuilder extends BaseRequestBuilder<PatientsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.api.patients.item collection
     * @param id Unique identifier of the item
     * @returns {PatientsItemRequestBuilder}
     */
     byId(id: Guid) : PatientsItemRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ListPatientsResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<PatientsRequestBuilderGetQueryParameters> | undefined) : Promise<ListPatientsResponse | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AddPatientResponse>}
     * @throws {HttpValidationProblemDetails} error when the service returns a 409 status code
     */
     post(body: AddPatientRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AddPatientResponse | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<PatientsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: AddPatientRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface PatientsRequestBuilderGetQueryParameters {
    name?: string;
    pageIndex?: number;
    pageSize?: number;
}
/**
 * Uri template for the request builder.
 */
export const PatientsRequestBuilderUriTemplate = "{+baseurl}/api/patients{?name*,pageIndex*,pageSize*}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const PatientsRequestBuilderNavigationMetadata: Record<Exclude<keyof PatientsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: PatientsItemRequestBuilderRequestsMetadata,
        pathParametersMappings: ["id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const PatientsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: PatientsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, text/plain;q=0.9",
        adapterMethodName: "send",
        responseBodyFactory:  createListPatientsResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: PatientsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, text/plain;q=0.9",
        errorMappings: {
            409: createHttpValidationProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAddPatientResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAddPatientRequest,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
