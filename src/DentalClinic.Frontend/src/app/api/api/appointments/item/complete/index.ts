/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createHttpValidationProblemDetailsFromDiscriminatorValue, createOkFromDiscriminatorValue, serializeCompleteAppointmentRequest, serializeOk, type CompleteAppointmentRequest, type HttpValidationProblemDetails, type Ok } from '../../../../models/index';
// @ts-ignore
import { type BaseRequestBuilder, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/appointments/{id}/complete
 */
export interface CompleteRequestBuilder extends BaseRequestBuilder<CompleteRequestBuilder> {
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Ok>}
     * @throws {HttpValidationProblemDetails} error when the service returns a 404 status code
     * @throws {HttpValidationProblemDetails} error when the service returns a 409 status code
     */
     post(body: CompleteAppointmentRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Ok | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: CompleteAppointmentRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const CompleteRequestBuilderUriTemplate = "{+baseurl}/api/appointments/{id}/complete";
/**
 * Metadata for all the requests in the request builder.
 */
export const CompleteRequestBuilderRequestsMetadata: RequestsMetadata = {
    post: {
        uriTemplate: CompleteRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, text/plain;q=0.9",
        errorMappings: {
            404: createHttpValidationProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
            409: createHttpValidationProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createOkFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeCompleteAppointmentRequest,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
