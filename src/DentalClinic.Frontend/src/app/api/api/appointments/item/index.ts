/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createGetAppointmentResponseFromDiscriminatorValue, createHttpValidationProblemDetailsFromDiscriminatorValue, serializeUpdateAppointmentRequest, type GetAppointmentResponse, type HttpValidationProblemDetails, type UpdateAppointmentRequest } from '../../../models/index';
// @ts-ignore
import { CancelRequestBuilderRequestsMetadata, type CancelRequestBuilder } from './cancel/index';
// @ts-ignore
import { CompleteRequestBuilderRequestsMetadata, type CompleteRequestBuilder } from './complete/index';
// @ts-ignore
import { PayRequestBuilderRequestsMetadata, type PayRequestBuilder } from './pay/index';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/appointments/{id}
 */
export interface AppointmentsItemRequestBuilder extends BaseRequestBuilder<AppointmentsItemRequestBuilder> {
    /**
     * The cancel property
     */
    get cancel(): CancelRequestBuilder;
    /**
     * The complete property
     */
    get complete(): CompleteRequestBuilder;
    /**
     * The pay property
     */
    get pay(): PayRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {HttpValidationProblemDetails} error when the service returns a 404 status code
     * @throws {HttpValidationProblemDetails} error when the service returns a 409 status code
     */
     delete(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<GetAppointmentResponse>}
     * @throws {HttpValidationProblemDetails} error when the service returns a 404 status code
     */
     get(requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<GetAppointmentResponse | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @throws {HttpValidationProblemDetails} error when the service returns a 404 status code
     * @throws {HttpValidationProblemDetails} error when the service returns a 409 status code
     */
     put(body: UpdateAppointmentRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<void>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPutRequestInformation(body: UpdateAppointmentRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
/**
 * Uri template for the request builder.
 */
export const AppointmentsItemRequestBuilderUriTemplate = "{+baseurl}/api/appointments/{id}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AppointmentsItemRequestBuilderNavigationMetadata: Record<Exclude<keyof AppointmentsItemRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    cancel: {
        requestsMetadata: CancelRequestBuilderRequestsMetadata,
    },
    complete: {
        requestsMetadata: CompleteRequestBuilderRequestsMetadata,
    },
    pay: {
        requestsMetadata: PayRequestBuilderRequestsMetadata,
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AppointmentsItemRequestBuilderRequestsMetadata: RequestsMetadata = {
    delete: {
        uriTemplate: AppointmentsItemRequestBuilderUriTemplate,
        errorMappings: {
            404: createHttpValidationProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
            409: createHttpValidationProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
    },
    get: {
        uriTemplate: AppointmentsItemRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, text/plain;q=0.9",
        errorMappings: {
            404: createHttpValidationProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createGetAppointmentResponseFromDiscriminatorValue,
    },
    put: {
        uriTemplate: AppointmentsItemRequestBuilderUriTemplate,
        errorMappings: {
            404: createHttpValidationProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
            409: createHttpValidationProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "sendNoResponseContent",
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeUpdateAppointmentRequest,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
