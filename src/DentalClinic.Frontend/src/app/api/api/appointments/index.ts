/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createAddAppointmentResponseFromDiscriminatorValue, createHttpValidationProblemDetailsFromDiscriminatorValue, createListAppointmentsResponseFromDiscriminatorValue, serializeAddAppointmentRequest, serializeAddAppointmentResponse, type AddAppointmentRequest, type AddAppointmentResponse, type HttpValidationProblemDetails, type ListAppointmentsResponse } from '../../models/index.js';
// @ts-ignore
import { AppointmentsItemRequestBuilderNavigationMetadata, AppointmentsItemRequestBuilderRequestsMetadata, type AppointmentsItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type Guid, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /api/appointments
 */
export interface AppointmentsRequestBuilder extends BaseRequestBuilder<AppointmentsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.api.appointments.item collection
     * @param id Unique identifier of the item
     * @returns {AppointmentsItemRequestBuilder}
     */
     byId(id: Guid) : AppointmentsItemRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ListAppointmentsResponse>}
     */
     get(requestConfiguration?: RequestConfiguration<AppointmentsRequestBuilderGetQueryParameters> | undefined) : Promise<ListAppointmentsResponse | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<AddAppointmentResponse>}
     * @throws {HttpValidationProblemDetails} error when the service returns a 404 status code
     */
     post(body: AddAppointmentRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<AddAppointmentResponse | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<AppointmentsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: AddAppointmentRequest, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface AppointmentsRequestBuilderGetQueryParameters {
    dentistId?: Guid;
    endDateTime?: Date;
    patientId?: Guid;
    startDateTime?: Date;
    status?: string;
}
/**
 * Uri template for the request builder.
 */
export const AppointmentsRequestBuilderUriTemplate = "{+baseurl}/api/appointments{?dentistId*,endDateTime*,patientId*,startDateTime*,status*}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const AppointmentsRequestBuilderNavigationMetadata: Record<Exclude<keyof AppointmentsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: AppointmentsItemRequestBuilderRequestsMetadata,
        navigationMetadata: AppointmentsItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const AppointmentsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: AppointmentsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, text/plain;q=0.9",
        adapterMethodName: "send",
        responseBodyFactory:  createListAppointmentsResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: AppointmentsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json, text/plain;q=0.9",
        errorMappings: {
            404: createHttpValidationProblemDetailsFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createAddAppointmentResponseFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeAddAppointmentRequest,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
