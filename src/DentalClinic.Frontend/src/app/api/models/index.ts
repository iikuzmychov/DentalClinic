/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type Guid, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AddAppointmentRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The dentistId property
     */
    dentistId?: Guid | null;
    /**
     * The duration property
     */
    duration?: string | null;
    /**
     * The patientId property
     */
    patientId?: Guid | null;
    /**
     * The startTime property
     */
    startTime?: Date | null;
}
export interface AddAppointmentResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: Guid | null;
}
export interface AddPatientRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The firstName property
     */
    firstName?: string | null;
    /**
     * The lastName property
     */
    lastName?: string | null;
    /**
     * The notes property
     */
    notes?: string | null;
    /**
     * The phoneNumber property
     */
    phoneNumber?: string | null;
    /**
     * The surname property
     */
    surname?: string | null;
}
export interface AddPatientResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: Guid | null;
}
export interface AddServiceRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The price property
     */
    price?: number | null;
}
export interface AddServiceResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: Guid | null;
}
export interface AddUserRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The firstName property
     */
    firstName?: string | null;
    /**
     * The lastName property
     */
    lastName?: string | null;
    /**
     * The password property
     */
    password?: string | null;
    /**
     * The phoneNumber property
     */
    phoneNumber?: string | null;
    /**
     * The role property
     */
    role?: Role | null;
    /**
     * The surname property
     */
    surname?: string | null;
}
export interface AddUserResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: Guid | null;
}
export type AppointmentStatus = (typeof AppointmentStatusObject)[keyof typeof AppointmentStatusObject];
export interface CompleteAppointmentRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The duration property
     */
    duration?: string | null;
    /**
     * The providedServiceIds property
     */
    providedServiceIds?: Guid[] | null;
}
export interface Conflict extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The statusCode property
     */
    statusCode?: number | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AddAppointmentRequest}
 */
// @ts-ignore
export function createAddAppointmentRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAddAppointmentRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AddAppointmentResponse}
 */
// @ts-ignore
export function createAddAppointmentResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAddAppointmentResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AddPatientRequest}
 */
// @ts-ignore
export function createAddPatientRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAddPatientRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AddPatientResponse}
 */
// @ts-ignore
export function createAddPatientResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAddPatientResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AddServiceRequest}
 */
// @ts-ignore
export function createAddServiceRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAddServiceRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AddServiceResponse}
 */
// @ts-ignore
export function createAddServiceResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAddServiceResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AddUserRequest}
 */
// @ts-ignore
export function createAddUserRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAddUserRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AddUserResponse}
 */
// @ts-ignore
export function createAddUserResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAddUserResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CompleteAppointmentRequest}
 */
// @ts-ignore
export function createCompleteAppointmentRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCompleteAppointmentRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Conflict}
 */
// @ts-ignore
export function createConflictFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoConflict;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GetAppointmentResponse}
 */
// @ts-ignore
export function createGetAppointmentResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetAppointmentResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GetAppointmentResponseItemDentist}
 */
// @ts-ignore
export function createGetAppointmentResponseItemDentistFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetAppointmentResponseItemDentist;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GetAppointmentResponseItemPatient}
 */
// @ts-ignore
export function createGetAppointmentResponseItemPatientFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetAppointmentResponseItemPatient;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GetAppointmentResponseItemProvidedService}
 */
// @ts-ignore
export function createGetAppointmentResponseItemProvidedServiceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetAppointmentResponseItemProvidedService;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GetPatientResponse}
 */
// @ts-ignore
export function createGetPatientResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetPatientResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GetServiceResponse}
 */
// @ts-ignore
export function createGetServiceResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetServiceResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GetUserResponse}
 */
// @ts-ignore
export function createGetUserResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGetUserResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HttpValidationProblemDetails_errors}
 */
// @ts-ignore
export function createHttpValidationProblemDetails_errorsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHttpValidationProblemDetails_errors;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {HttpValidationProblemDetails}
 */
// @ts-ignore
export function createHttpValidationProblemDetailsFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoHttpValidationProblemDetails;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ListAppointmentsResponse}
 */
// @ts-ignore
export function createListAppointmentsResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoListAppointmentsResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ListAppointmentsResponseItemDentist}
 */
// @ts-ignore
export function createListAppointmentsResponseItemDentistFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoListAppointmentsResponseItemDentist;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ListAppointmentsResponseItem}
 */
// @ts-ignore
export function createListAppointmentsResponseItemFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoListAppointmentsResponseItem;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ListAppointmentsResponseItemPatient}
 */
// @ts-ignore
export function createListAppointmentsResponseItemPatientFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoListAppointmentsResponseItemPatient;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ListAppointmentsResponseItemProvidedService}
 */
// @ts-ignore
export function createListAppointmentsResponseItemProvidedServiceFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoListAppointmentsResponseItemProvidedService;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ListPatientsResponse}
 */
// @ts-ignore
export function createListPatientsResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoListPatientsResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ListPatientsResponseItem}
 */
// @ts-ignore
export function createListPatientsResponseItemFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoListPatientsResponseItem;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ListServicesResponse}
 */
// @ts-ignore
export function createListServicesResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoListServicesResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ListServicesResponseItem}
 */
// @ts-ignore
export function createListServicesResponseItemFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoListServicesResponseItem;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ListUsersResponse}
 */
// @ts-ignore
export function createListUsersResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoListUsersResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ListUsersResponseItem}
 */
// @ts-ignore
export function createListUsersResponseItemFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoListUsersResponseItem;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LoginRequest}
 */
// @ts-ignore
export function createLoginRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLoginRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {LoginResponse}
 */
// @ts-ignore
export function createLoginResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoLoginResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {NotFound}
 */
// @ts-ignore
export function createNotFoundFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoNotFound;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Ok}
 */
// @ts-ignore
export function createOkFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoOk;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateAppointmentRequest}
 */
// @ts-ignore
export function createUpdateAppointmentRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateAppointmentRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdatePatientRequest}
 */
// @ts-ignore
export function createUpdatePatientRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdatePatientRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateServiceRequest}
 */
// @ts-ignore
export function createUpdateServiceRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateServiceRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateUserRequest}
 */
// @ts-ignore
export function createUpdateUserRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateUserRequest;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAddAppointmentRequest(addAppointmentRequest: Partial<AddAppointmentRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "dentistId": n => { addAppointmentRequest.dentistId = n.getGuidValue(); },
        "duration": n => { addAppointmentRequest.duration = n.getStringValue(); },
        "patientId": n => { addAppointmentRequest.patientId = n.getGuidValue(); },
        "startTime": n => { addAppointmentRequest.startTime = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAddAppointmentResponse(addAppointmentResponse: Partial<AddAppointmentResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { addAppointmentResponse.id = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAddPatientRequest(addPatientRequest: Partial<AddPatientRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { addPatientRequest.email = n.getStringValue(); },
        "firstName": n => { addPatientRequest.firstName = n.getStringValue(); },
        "lastName": n => { addPatientRequest.lastName = n.getStringValue(); },
        "notes": n => { addPatientRequest.notes = n.getStringValue(); },
        "phoneNumber": n => { addPatientRequest.phoneNumber = n.getStringValue(); },
        "surname": n => { addPatientRequest.surname = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAddPatientResponse(addPatientResponse: Partial<AddPatientResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { addPatientResponse.id = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAddServiceRequest(addServiceRequest: Partial<AddServiceRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { addServiceRequest.name = n.getStringValue(); },
        "price": n => { addServiceRequest.price = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAddServiceResponse(addServiceResponse: Partial<AddServiceResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { addServiceResponse.id = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAddUserRequest(addUserRequest: Partial<AddUserRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { addUserRequest.email = n.getStringValue(); },
        "firstName": n => { addUserRequest.firstName = n.getStringValue(); },
        "lastName": n => { addUserRequest.lastName = n.getStringValue(); },
        "password": n => { addUserRequest.password = n.getStringValue(); },
        "phoneNumber": n => { addUserRequest.phoneNumber = n.getStringValue(); },
        "role": n => { addUserRequest.role = n.getEnumValue<Role>(RoleObject); },
        "surname": n => { addUserRequest.surname = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAddUserResponse(addUserResponse: Partial<AddUserResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { addUserResponse.id = n.getGuidValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCompleteAppointmentRequest(completeAppointmentRequest: Partial<CompleteAppointmentRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "duration": n => { completeAppointmentRequest.duration = n.getStringValue(); },
        "providedServiceIds": n => { completeAppointmentRequest.providedServiceIds = n.getCollectionOfPrimitiveValues<Guid>(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoConflict(conflict: Partial<Conflict> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "statusCode": n => { conflict.statusCode = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGetAppointmentResponse(getAppointmentResponse: Partial<GetAppointmentResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "dentist": n => { getAppointmentResponse.dentist = n.getObjectValue<GetAppointmentResponseItemDentist>(createGetAppointmentResponseItemDentistFromDiscriminatorValue); },
        "duration": n => { getAppointmentResponse.duration = n.getStringValue(); },
        "id": n => { getAppointmentResponse.id = n.getGuidValue(); },
        "patient": n => { getAppointmentResponse.patient = n.getObjectValue<GetAppointmentResponseItemPatient>(createGetAppointmentResponseItemPatientFromDiscriminatorValue); },
        "providedServices": n => { getAppointmentResponse.providedServices = n.getCollectionOfObjectValues<GetAppointmentResponseItemProvidedService>(createGetAppointmentResponseItemProvidedServiceFromDiscriminatorValue); },
        "startTime": n => { getAppointmentResponse.startTime = n.getDateValue(); },
        "status": n => { getAppointmentResponse.status = n.getEnumValue<AppointmentStatus>(AppointmentStatusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGetAppointmentResponseItemDentist(getAppointmentResponseItemDentist: Partial<GetAppointmentResponseItemDentist> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "firstName": n => { getAppointmentResponseItemDentist.firstName = n.getStringValue(); },
        "id": n => { getAppointmentResponseItemDentist.id = n.getGuidValue(); },
        "lastName": n => { getAppointmentResponseItemDentist.lastName = n.getStringValue(); },
        "surname": n => { getAppointmentResponseItemDentist.surname = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGetAppointmentResponseItemPatient(getAppointmentResponseItemPatient: Partial<GetAppointmentResponseItemPatient> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "firstName": n => { getAppointmentResponseItemPatient.firstName = n.getStringValue(); },
        "id": n => { getAppointmentResponseItemPatient.id = n.getGuidValue(); },
        "lastName": n => { getAppointmentResponseItemPatient.lastName = n.getStringValue(); },
        "surname": n => { getAppointmentResponseItemPatient.surname = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGetAppointmentResponseItemProvidedService(getAppointmentResponseItemProvidedService: Partial<GetAppointmentResponseItemProvidedService> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { getAppointmentResponseItemProvidedService.id = n.getGuidValue(); },
        "name": n => { getAppointmentResponseItemProvidedService.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGetPatientResponse(getPatientResponse: Partial<GetPatientResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { getPatientResponse.email = n.getStringValue(); },
        "firstName": n => { getPatientResponse.firstName = n.getStringValue(); },
        "id": n => { getPatientResponse.id = n.getGuidValue(); },
        "lastName": n => { getPatientResponse.lastName = n.getStringValue(); },
        "notes": n => { getPatientResponse.notes = n.getStringValue(); },
        "phoneNumber": n => { getPatientResponse.phoneNumber = n.getStringValue(); },
        "surname": n => { getPatientResponse.surname = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGetServiceResponse(getServiceResponse: Partial<GetServiceResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { getServiceResponse.id = n.getGuidValue(); },
        "name": n => { getServiceResponse.name = n.getStringValue(); },
        "price": n => { getServiceResponse.price = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGetUserResponse(getUserResponse: Partial<GetUserResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { getUserResponse.email = n.getStringValue(); },
        "firstName": n => { getUserResponse.firstName = n.getStringValue(); },
        "id": n => { getUserResponse.id = n.getGuidValue(); },
        "lastName": n => { getUserResponse.lastName = n.getStringValue(); },
        "phoneNumber": n => { getUserResponse.phoneNumber = n.getStringValue(); },
        "role": n => { getUserResponse.role = n.getEnumValue<Role>(RoleObject); },
        "surname": n => { getUserResponse.surname = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHttpValidationProblemDetails(httpValidationProblemDetails: Partial<HttpValidationProblemDetails> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "detail": n => { httpValidationProblemDetails.detail = n.getStringValue(); },
        "errors": n => { httpValidationProblemDetails.errors = n.getObjectValue<HttpValidationProblemDetails_errors>(createHttpValidationProblemDetails_errorsFromDiscriminatorValue); },
        "instance": n => { httpValidationProblemDetails.instance = n.getStringValue(); },
        "status": n => { httpValidationProblemDetails.status = n.getNumberValue(); },
        "title": n => { httpValidationProblemDetails.title = n.getStringValue(); },
        "type": n => { httpValidationProblemDetails.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoHttpValidationProblemDetails_errors(httpValidationProblemDetails_errors: Partial<HttpValidationProblemDetails_errors> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoListAppointmentsResponse(listAppointmentsResponse: Partial<ListAppointmentsResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "items": n => { listAppointmentsResponse.items = n.getCollectionOfObjectValues<ListAppointmentsResponseItem>(createListAppointmentsResponseItemFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoListAppointmentsResponseItem(listAppointmentsResponseItem: Partial<ListAppointmentsResponseItem> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "dentist": n => { listAppointmentsResponseItem.dentist = n.getObjectValue<ListAppointmentsResponseItemDentist>(createListAppointmentsResponseItemDentistFromDiscriminatorValue); },
        "duration": n => { listAppointmentsResponseItem.duration = n.getStringValue(); },
        "id": n => { listAppointmentsResponseItem.id = n.getGuidValue(); },
        "patient": n => { listAppointmentsResponseItem.patient = n.getObjectValue<ListAppointmentsResponseItemPatient>(createListAppointmentsResponseItemPatientFromDiscriminatorValue); },
        "providedServices": n => { listAppointmentsResponseItem.providedServices = n.getCollectionOfObjectValues<ListAppointmentsResponseItemProvidedService>(createListAppointmentsResponseItemProvidedServiceFromDiscriminatorValue); },
        "startTime": n => { listAppointmentsResponseItem.startTime = n.getDateValue(); },
        "status": n => { listAppointmentsResponseItem.status = n.getEnumValue<AppointmentStatus>(AppointmentStatusObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoListAppointmentsResponseItemDentist(listAppointmentsResponseItemDentist: Partial<ListAppointmentsResponseItemDentist> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "firstName": n => { listAppointmentsResponseItemDentist.firstName = n.getStringValue(); },
        "id": n => { listAppointmentsResponseItemDentist.id = n.getGuidValue(); },
        "lastName": n => { listAppointmentsResponseItemDentist.lastName = n.getStringValue(); },
        "surname": n => { listAppointmentsResponseItemDentist.surname = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoListAppointmentsResponseItemPatient(listAppointmentsResponseItemPatient: Partial<ListAppointmentsResponseItemPatient> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "firstName": n => { listAppointmentsResponseItemPatient.firstName = n.getStringValue(); },
        "id": n => { listAppointmentsResponseItemPatient.id = n.getGuidValue(); },
        "lastName": n => { listAppointmentsResponseItemPatient.lastName = n.getStringValue(); },
        "surname": n => { listAppointmentsResponseItemPatient.surname = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoListAppointmentsResponseItemProvidedService(listAppointmentsResponseItemProvidedService: Partial<ListAppointmentsResponseItemProvidedService> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { listAppointmentsResponseItemProvidedService.id = n.getGuidValue(); },
        "name": n => { listAppointmentsResponseItemProvidedService.name = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoListPatientsResponse(listPatientsResponse: Partial<ListPatientsResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "items": n => { listPatientsResponse.items = n.getCollectionOfObjectValues<ListPatientsResponseItem>(createListPatientsResponseItemFromDiscriminatorValue); },
        "totalCount": n => { listPatientsResponse.totalCount = n.getNumberValue(); },
        "totalPagesCount": n => { listPatientsResponse.totalPagesCount = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoListPatientsResponseItem(listPatientsResponseItem: Partial<ListPatientsResponseItem> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { listPatientsResponseItem.email = n.getStringValue(); },
        "firstName": n => { listPatientsResponseItem.firstName = n.getStringValue(); },
        "id": n => { listPatientsResponseItem.id = n.getGuidValue(); },
        "lastName": n => { listPatientsResponseItem.lastName = n.getStringValue(); },
        "phoneNumber": n => { listPatientsResponseItem.phoneNumber = n.getStringValue(); },
        "surname": n => { listPatientsResponseItem.surname = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoListServicesResponse(listServicesResponse: Partial<ListServicesResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "items": n => { listServicesResponse.items = n.getCollectionOfObjectValues<ListServicesResponseItem>(createListServicesResponseItemFromDiscriminatorValue); },
        "totalCount": n => { listServicesResponse.totalCount = n.getNumberValue(); },
        "totalPagesCount": n => { listServicesResponse.totalPagesCount = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoListServicesResponseItem(listServicesResponseItem: Partial<ListServicesResponseItem> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { listServicesResponseItem.id = n.getGuidValue(); },
        "name": n => { listServicesResponseItem.name = n.getStringValue(); },
        "price": n => { listServicesResponseItem.price = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoListUsersResponse(listUsersResponse: Partial<ListUsersResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "items": n => { listUsersResponse.items = n.getCollectionOfObjectValues<ListUsersResponseItem>(createListUsersResponseItemFromDiscriminatorValue); },
        "totalCount": n => { listUsersResponse.totalCount = n.getNumberValue(); },
        "totalPagesCount": n => { listUsersResponse.totalPagesCount = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoListUsersResponseItem(listUsersResponseItem: Partial<ListUsersResponseItem> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { listUsersResponseItem.email = n.getStringValue(); },
        "firstName": n => { listUsersResponseItem.firstName = n.getStringValue(); },
        "id": n => { listUsersResponseItem.id = n.getGuidValue(); },
        "lastName": n => { listUsersResponseItem.lastName = n.getStringValue(); },
        "phoneNumber": n => { listUsersResponseItem.phoneNumber = n.getStringValue(); },
        "role": n => { listUsersResponseItem.role = n.getEnumValue<Role>(RoleObject); },
        "surname": n => { listUsersResponseItem.surname = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLoginRequest(loginRequest: Partial<LoginRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { loginRequest.email = n.getStringValue(); },
        "password": n => { loginRequest.password = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoLoginResponse(loginResponse: Partial<LoginResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "token": n => { loginResponse.token = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoNotFound(notFound: Partial<NotFound> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "statusCode": n => { notFound.statusCode = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoOk(ok: Partial<Ok> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "statusCode": n => { ok.statusCode = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateAppointmentRequest(updateAppointmentRequest: Partial<UpdateAppointmentRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "dentistId": n => { updateAppointmentRequest.dentistId = n.getGuidValue(); },
        "duration": n => { updateAppointmentRequest.duration = n.getStringValue(); },
        "patientId": n => { updateAppointmentRequest.patientId = n.getGuidValue(); },
        "startTime": n => { updateAppointmentRequest.startTime = n.getDateValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdatePatientRequest(updatePatientRequest: Partial<UpdatePatientRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { updatePatientRequest.email = n.getStringValue(); },
        "firstName": n => { updatePatientRequest.firstName = n.getStringValue(); },
        "lastName": n => { updatePatientRequest.lastName = n.getStringValue(); },
        "notes": n => { updatePatientRequest.notes = n.getStringValue(); },
        "phoneNumber": n => { updatePatientRequest.phoneNumber = n.getStringValue(); },
        "surname": n => { updatePatientRequest.surname = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateServiceRequest(updateServiceRequest: Partial<UpdateServiceRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { updateServiceRequest.name = n.getStringValue(); },
        "price": n => { updateServiceRequest.price = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateUserRequest(updateUserRequest: Partial<UpdateUserRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "firstName": n => { updateUserRequest.firstName = n.getStringValue(); },
        "lastName": n => { updateUserRequest.lastName = n.getStringValue(); },
        "phoneNumber": n => { updateUserRequest.phoneNumber = n.getStringValue(); },
        "surname": n => { updateUserRequest.surname = n.getStringValue(); },
    }
}
export interface GetAppointmentResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The dentist property
     */
    dentist?: GetAppointmentResponseItemDentist | null;
    /**
     * The duration property
     */
    duration?: string | null;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The patient property
     */
    patient?: GetAppointmentResponseItemPatient | null;
    /**
     * The providedServices property
     */
    providedServices?: GetAppointmentResponseItemProvidedService[] | null;
    /**
     * The startTime property
     */
    startTime?: Date | null;
    /**
     * The status property
     */
    status?: AppointmentStatus | null;
}
export interface GetAppointmentResponseItemDentist extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The firstName property
     */
    firstName?: string | null;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The lastName property
     */
    lastName?: string | null;
    /**
     * The surname property
     */
    surname?: string | null;
}
export interface GetAppointmentResponseItemPatient extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The firstName property
     */
    firstName?: string | null;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The lastName property
     */
    lastName?: string | null;
    /**
     * The surname property
     */
    surname?: string | null;
}
export interface GetAppointmentResponseItemProvidedService extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The name property
     */
    name?: string | null;
}
export interface GetPatientResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The firstName property
     */
    firstName?: string | null;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The lastName property
     */
    lastName?: string | null;
    /**
     * The notes property
     */
    notes?: string | null;
    /**
     * The phoneNumber property
     */
    phoneNumber?: string | null;
    /**
     * The surname property
     */
    surname?: string | null;
}
export interface GetServiceResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The price property
     */
    price?: number | null;
}
export interface GetUserResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The firstName property
     */
    firstName?: string | null;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The lastName property
     */
    lastName?: string | null;
    /**
     * The phoneNumber property
     */
    phoneNumber?: string | null;
    /**
     * The role property
     */
    role?: Role | null;
    /**
     * The surname property
     */
    surname?: string | null;
}
export interface HttpValidationProblemDetails extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The detail property
     */
    detail?: string | null;
    /**
     * The errors property
     */
    errors?: HttpValidationProblemDetails_errors | null;
    /**
     * The instance property
     */
    instance?: string | null;
    /**
     * The status property
     */
    status?: number | null;
    /**
     * The title property
     */
    title?: string | null;
    /**
     * The type property
     */
    type?: string | null;
}
export interface HttpValidationProblemDetails_errors extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
}
export interface ListAppointmentsResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The items property
     */
    items?: ListAppointmentsResponseItem[] | null;
}
export interface ListAppointmentsResponseItem extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The dentist property
     */
    dentist?: ListAppointmentsResponseItemDentist | null;
    /**
     * The duration property
     */
    duration?: string | null;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The patient property
     */
    patient?: ListAppointmentsResponseItemPatient | null;
    /**
     * The providedServices property
     */
    providedServices?: ListAppointmentsResponseItemProvidedService[] | null;
    /**
     * The startTime property
     */
    startTime?: Date | null;
    /**
     * The status property
     */
    status?: AppointmentStatus | null;
}
export interface ListAppointmentsResponseItemDentist extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The firstName property
     */
    firstName?: string | null;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The lastName property
     */
    lastName?: string | null;
    /**
     * The surname property
     */
    surname?: string | null;
}
export interface ListAppointmentsResponseItemPatient extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The firstName property
     */
    firstName?: string | null;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The lastName property
     */
    lastName?: string | null;
    /**
     * The surname property
     */
    surname?: string | null;
}
export interface ListAppointmentsResponseItemProvidedService extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The name property
     */
    name?: string | null;
}
export interface ListPatientsResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The items property
     */
    items?: ListPatientsResponseItem[] | null;
    /**
     * The totalCount property
     */
    totalCount?: number | null;
    /**
     * The totalPagesCount property
     */
    totalPagesCount?: number | null;
}
export interface ListPatientsResponseItem extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The firstName property
     */
    firstName?: string | null;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The lastName property
     */
    lastName?: string | null;
    /**
     * The phoneNumber property
     */
    phoneNumber?: string | null;
    /**
     * The surname property
     */
    surname?: string | null;
}
export interface ListServicesResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The items property
     */
    items?: ListServicesResponseItem[] | null;
    /**
     * The totalCount property
     */
    totalCount?: number | null;
    /**
     * The totalPagesCount property
     */
    totalPagesCount?: number | null;
}
export interface ListServicesResponseItem extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The price property
     */
    price?: number | null;
}
export interface ListUsersResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The items property
     */
    items?: ListUsersResponseItem[] | null;
    /**
     * The totalCount property
     */
    totalCount?: number | null;
    /**
     * The totalPagesCount property
     */
    totalPagesCount?: number | null;
}
export interface ListUsersResponseItem extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The firstName property
     */
    firstName?: string | null;
    /**
     * The id property
     */
    id?: Guid | null;
    /**
     * The lastName property
     */
    lastName?: string | null;
    /**
     * The phoneNumber property
     */
    phoneNumber?: string | null;
    /**
     * The role property
     */
    role?: Role | null;
    /**
     * The surname property
     */
    surname?: string | null;
}
export interface LoginRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The password property
     */
    password?: string | null;
}
export interface LoginResponse extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The token property
     */
    token?: string | null;
}
export interface NotFound extends AdditionalDataHolder, ApiError, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The statusCode property
     */
    statusCode?: number | null;
}
export interface Ok extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The statusCode property
     */
    statusCode?: number | null;
}
export type Role = (typeof RoleObject)[keyof typeof RoleObject];
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAddAppointmentRequest(writer: SerializationWriter, addAppointmentRequest: Partial<AddAppointmentRequest> | undefined | null = {}) : void {
    if (addAppointmentRequest) {
        writer.writeGuidValue("dentistId", addAppointmentRequest.dentistId);
        writer.writeStringValue("duration", addAppointmentRequest.duration);
        writer.writeGuidValue("patientId", addAppointmentRequest.patientId);
        writer.writeDateValue("startTime", addAppointmentRequest.startTime);
        writer.writeAdditionalData(addAppointmentRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAddAppointmentResponse(writer: SerializationWriter, addAppointmentResponse: Partial<AddAppointmentResponse> | undefined | null = {}) : void {
    if (addAppointmentResponse) {
        writer.writeGuidValue("id", addAppointmentResponse.id);
        writer.writeAdditionalData(addAppointmentResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAddPatientRequest(writer: SerializationWriter, addPatientRequest: Partial<AddPatientRequest> | undefined | null = {}) : void {
    if (addPatientRequest) {
        writer.writeStringValue("email", addPatientRequest.email);
        writer.writeStringValue("firstName", addPatientRequest.firstName);
        writer.writeStringValue("lastName", addPatientRequest.lastName);
        writer.writeStringValue("notes", addPatientRequest.notes);
        writer.writeStringValue("phoneNumber", addPatientRequest.phoneNumber);
        writer.writeStringValue("surname", addPatientRequest.surname);
        writer.writeAdditionalData(addPatientRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAddPatientResponse(writer: SerializationWriter, addPatientResponse: Partial<AddPatientResponse> | undefined | null = {}) : void {
    if (addPatientResponse) {
        writer.writeGuidValue("id", addPatientResponse.id);
        writer.writeAdditionalData(addPatientResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAddServiceRequest(writer: SerializationWriter, addServiceRequest: Partial<AddServiceRequest> | undefined | null = {}) : void {
    if (addServiceRequest) {
        writer.writeStringValue("name", addServiceRequest.name);
        writer.writeNumberValue("price", addServiceRequest.price);
        writer.writeAdditionalData(addServiceRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAddServiceResponse(writer: SerializationWriter, addServiceResponse: Partial<AddServiceResponse> | undefined | null = {}) : void {
    if (addServiceResponse) {
        writer.writeGuidValue("id", addServiceResponse.id);
        writer.writeAdditionalData(addServiceResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAddUserRequest(writer: SerializationWriter, addUserRequest: Partial<AddUserRequest> | undefined | null = {}) : void {
    if (addUserRequest) {
        writer.writeStringValue("email", addUserRequest.email);
        writer.writeStringValue("firstName", addUserRequest.firstName);
        writer.writeStringValue("lastName", addUserRequest.lastName);
        writer.writeStringValue("password", addUserRequest.password);
        writer.writeStringValue("phoneNumber", addUserRequest.phoneNumber);
        writer.writeEnumValue<Role>("role", addUserRequest.role);
        writer.writeStringValue("surname", addUserRequest.surname);
        writer.writeAdditionalData(addUserRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAddUserResponse(writer: SerializationWriter, addUserResponse: Partial<AddUserResponse> | undefined | null = {}) : void {
    if (addUserResponse) {
        writer.writeGuidValue("id", addUserResponse.id);
        writer.writeAdditionalData(addUserResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCompleteAppointmentRequest(writer: SerializationWriter, completeAppointmentRequest: Partial<CompleteAppointmentRequest> | undefined | null = {}) : void {
    if (completeAppointmentRequest) {
        writer.writeStringValue("duration", completeAppointmentRequest.duration);
        writer.writeCollectionOfPrimitiveValues<Guid>("providedServiceIds", completeAppointmentRequest.providedServiceIds);
        writer.writeAdditionalData(completeAppointmentRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeConflict(writer: SerializationWriter, conflict: Partial<Conflict> | undefined | null = {}) : void {
    if (conflict) {
        writer.writeNumberValue("statusCode", conflict.statusCode);
        writer.writeAdditionalData(conflict.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGetAppointmentResponse(writer: SerializationWriter, getAppointmentResponse: Partial<GetAppointmentResponse> | undefined | null = {}) : void {
    if (getAppointmentResponse) {
        writer.writeObjectValue<GetAppointmentResponseItemDentist>("dentist", getAppointmentResponse.dentist, serializeGetAppointmentResponseItemDentist);
        writer.writeStringValue("duration", getAppointmentResponse.duration);
        writer.writeGuidValue("id", getAppointmentResponse.id);
        writer.writeObjectValue<GetAppointmentResponseItemPatient>("patient", getAppointmentResponse.patient, serializeGetAppointmentResponseItemPatient);
        writer.writeCollectionOfObjectValues<GetAppointmentResponseItemProvidedService>("providedServices", getAppointmentResponse.providedServices, serializeGetAppointmentResponseItemProvidedService);
        writer.writeDateValue("startTime", getAppointmentResponse.startTime);
        writer.writeEnumValue<AppointmentStatus>("status", getAppointmentResponse.status);
        writer.writeAdditionalData(getAppointmentResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGetAppointmentResponseItemDentist(writer: SerializationWriter, getAppointmentResponseItemDentist: Partial<GetAppointmentResponseItemDentist> | undefined | null = {}) : void {
    if (getAppointmentResponseItemDentist) {
        writer.writeStringValue("firstName", getAppointmentResponseItemDentist.firstName);
        writer.writeGuidValue("id", getAppointmentResponseItemDentist.id);
        writer.writeStringValue("lastName", getAppointmentResponseItemDentist.lastName);
        writer.writeStringValue("surname", getAppointmentResponseItemDentist.surname);
        writer.writeAdditionalData(getAppointmentResponseItemDentist.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGetAppointmentResponseItemPatient(writer: SerializationWriter, getAppointmentResponseItemPatient: Partial<GetAppointmentResponseItemPatient> | undefined | null = {}) : void {
    if (getAppointmentResponseItemPatient) {
        writer.writeStringValue("firstName", getAppointmentResponseItemPatient.firstName);
        writer.writeGuidValue("id", getAppointmentResponseItemPatient.id);
        writer.writeStringValue("lastName", getAppointmentResponseItemPatient.lastName);
        writer.writeStringValue("surname", getAppointmentResponseItemPatient.surname);
        writer.writeAdditionalData(getAppointmentResponseItemPatient.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGetAppointmentResponseItemProvidedService(writer: SerializationWriter, getAppointmentResponseItemProvidedService: Partial<GetAppointmentResponseItemProvidedService> | undefined | null = {}) : void {
    if (getAppointmentResponseItemProvidedService) {
        writer.writeGuidValue("id", getAppointmentResponseItemProvidedService.id);
        writer.writeStringValue("name", getAppointmentResponseItemProvidedService.name);
        writer.writeAdditionalData(getAppointmentResponseItemProvidedService.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGetPatientResponse(writer: SerializationWriter, getPatientResponse: Partial<GetPatientResponse> | undefined | null = {}) : void {
    if (getPatientResponse) {
        writer.writeStringValue("email", getPatientResponse.email);
        writer.writeStringValue("firstName", getPatientResponse.firstName);
        writer.writeGuidValue("id", getPatientResponse.id);
        writer.writeStringValue("lastName", getPatientResponse.lastName);
        writer.writeStringValue("notes", getPatientResponse.notes);
        writer.writeStringValue("phoneNumber", getPatientResponse.phoneNumber);
        writer.writeStringValue("surname", getPatientResponse.surname);
        writer.writeAdditionalData(getPatientResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGetServiceResponse(writer: SerializationWriter, getServiceResponse: Partial<GetServiceResponse> | undefined | null = {}) : void {
    if (getServiceResponse) {
        writer.writeGuidValue("id", getServiceResponse.id);
        writer.writeStringValue("name", getServiceResponse.name);
        writer.writeNumberValue("price", getServiceResponse.price);
        writer.writeAdditionalData(getServiceResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGetUserResponse(writer: SerializationWriter, getUserResponse: Partial<GetUserResponse> | undefined | null = {}) : void {
    if (getUserResponse) {
        writer.writeStringValue("email", getUserResponse.email);
        writer.writeStringValue("firstName", getUserResponse.firstName);
        writer.writeGuidValue("id", getUserResponse.id);
        writer.writeStringValue("lastName", getUserResponse.lastName);
        writer.writeStringValue("phoneNumber", getUserResponse.phoneNumber);
        writer.writeEnumValue<Role>("role", getUserResponse.role);
        writer.writeStringValue("surname", getUserResponse.surname);
        writer.writeAdditionalData(getUserResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHttpValidationProblemDetails(writer: SerializationWriter, httpValidationProblemDetails: Partial<HttpValidationProblemDetails> | undefined | null = {}) : void {
    if (httpValidationProblemDetails) {
        writer.writeStringValue("detail", httpValidationProblemDetails.detail);
        writer.writeObjectValue<HttpValidationProblemDetails_errors>("errors", httpValidationProblemDetails.errors, serializeHttpValidationProblemDetails_errors);
        writer.writeStringValue("instance", httpValidationProblemDetails.instance);
        writer.writeNumberValue("status", httpValidationProblemDetails.status);
        writer.writeStringValue("title", httpValidationProblemDetails.title);
        writer.writeStringValue("type", httpValidationProblemDetails.type);
        writer.writeAdditionalData(httpValidationProblemDetails.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeHttpValidationProblemDetails_errors(writer: SerializationWriter, httpValidationProblemDetails_errors: Partial<HttpValidationProblemDetails_errors> | undefined | null = {}) : void {
    if (httpValidationProblemDetails_errors) {
        writer.writeAdditionalData(httpValidationProblemDetails_errors.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeListAppointmentsResponse(writer: SerializationWriter, listAppointmentsResponse: Partial<ListAppointmentsResponse> | undefined | null = {}) : void {
    if (listAppointmentsResponse) {
        writer.writeCollectionOfObjectValues<ListAppointmentsResponseItem>("items", listAppointmentsResponse.items, serializeListAppointmentsResponseItem);
        writer.writeAdditionalData(listAppointmentsResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeListAppointmentsResponseItem(writer: SerializationWriter, listAppointmentsResponseItem: Partial<ListAppointmentsResponseItem> | undefined | null = {}) : void {
    if (listAppointmentsResponseItem) {
        writer.writeObjectValue<ListAppointmentsResponseItemDentist>("dentist", listAppointmentsResponseItem.dentist, serializeListAppointmentsResponseItemDentist);
        writer.writeStringValue("duration", listAppointmentsResponseItem.duration);
        writer.writeGuidValue("id", listAppointmentsResponseItem.id);
        writer.writeObjectValue<ListAppointmentsResponseItemPatient>("patient", listAppointmentsResponseItem.patient, serializeListAppointmentsResponseItemPatient);
        writer.writeCollectionOfObjectValues<ListAppointmentsResponseItemProvidedService>("providedServices", listAppointmentsResponseItem.providedServices, serializeListAppointmentsResponseItemProvidedService);
        writer.writeDateValue("startTime", listAppointmentsResponseItem.startTime);
        writer.writeEnumValue<AppointmentStatus>("status", listAppointmentsResponseItem.status);
        writer.writeAdditionalData(listAppointmentsResponseItem.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeListAppointmentsResponseItemDentist(writer: SerializationWriter, listAppointmentsResponseItemDentist: Partial<ListAppointmentsResponseItemDentist> | undefined | null = {}) : void {
    if (listAppointmentsResponseItemDentist) {
        writer.writeStringValue("firstName", listAppointmentsResponseItemDentist.firstName);
        writer.writeGuidValue("id", listAppointmentsResponseItemDentist.id);
        writer.writeStringValue("lastName", listAppointmentsResponseItemDentist.lastName);
        writer.writeStringValue("surname", listAppointmentsResponseItemDentist.surname);
        writer.writeAdditionalData(listAppointmentsResponseItemDentist.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeListAppointmentsResponseItemPatient(writer: SerializationWriter, listAppointmentsResponseItemPatient: Partial<ListAppointmentsResponseItemPatient> | undefined | null = {}) : void {
    if (listAppointmentsResponseItemPatient) {
        writer.writeStringValue("firstName", listAppointmentsResponseItemPatient.firstName);
        writer.writeGuidValue("id", listAppointmentsResponseItemPatient.id);
        writer.writeStringValue("lastName", listAppointmentsResponseItemPatient.lastName);
        writer.writeStringValue("surname", listAppointmentsResponseItemPatient.surname);
        writer.writeAdditionalData(listAppointmentsResponseItemPatient.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeListAppointmentsResponseItemProvidedService(writer: SerializationWriter, listAppointmentsResponseItemProvidedService: Partial<ListAppointmentsResponseItemProvidedService> | undefined | null = {}) : void {
    if (listAppointmentsResponseItemProvidedService) {
        writer.writeGuidValue("id", listAppointmentsResponseItemProvidedService.id);
        writer.writeStringValue("name", listAppointmentsResponseItemProvidedService.name);
        writer.writeAdditionalData(listAppointmentsResponseItemProvidedService.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeListPatientsResponse(writer: SerializationWriter, listPatientsResponse: Partial<ListPatientsResponse> | undefined | null = {}) : void {
    if (listPatientsResponse) {
        writer.writeCollectionOfObjectValues<ListPatientsResponseItem>("items", listPatientsResponse.items, serializeListPatientsResponseItem);
        writer.writeNumberValue("totalCount", listPatientsResponse.totalCount);
        writer.writeNumberValue("totalPagesCount", listPatientsResponse.totalPagesCount);
        writer.writeAdditionalData(listPatientsResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeListPatientsResponseItem(writer: SerializationWriter, listPatientsResponseItem: Partial<ListPatientsResponseItem> | undefined | null = {}) : void {
    if (listPatientsResponseItem) {
        writer.writeStringValue("email", listPatientsResponseItem.email);
        writer.writeStringValue("firstName", listPatientsResponseItem.firstName);
        writer.writeGuidValue("id", listPatientsResponseItem.id);
        writer.writeStringValue("lastName", listPatientsResponseItem.lastName);
        writer.writeStringValue("phoneNumber", listPatientsResponseItem.phoneNumber);
        writer.writeStringValue("surname", listPatientsResponseItem.surname);
        writer.writeAdditionalData(listPatientsResponseItem.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeListServicesResponse(writer: SerializationWriter, listServicesResponse: Partial<ListServicesResponse> | undefined | null = {}) : void {
    if (listServicesResponse) {
        writer.writeCollectionOfObjectValues<ListServicesResponseItem>("items", listServicesResponse.items, serializeListServicesResponseItem);
        writer.writeNumberValue("totalCount", listServicesResponse.totalCount);
        writer.writeNumberValue("totalPagesCount", listServicesResponse.totalPagesCount);
        writer.writeAdditionalData(listServicesResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeListServicesResponseItem(writer: SerializationWriter, listServicesResponseItem: Partial<ListServicesResponseItem> | undefined | null = {}) : void {
    if (listServicesResponseItem) {
        writer.writeGuidValue("id", listServicesResponseItem.id);
        writer.writeStringValue("name", listServicesResponseItem.name);
        writer.writeNumberValue("price", listServicesResponseItem.price);
        writer.writeAdditionalData(listServicesResponseItem.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeListUsersResponse(writer: SerializationWriter, listUsersResponse: Partial<ListUsersResponse> | undefined | null = {}) : void {
    if (listUsersResponse) {
        writer.writeCollectionOfObjectValues<ListUsersResponseItem>("items", listUsersResponse.items, serializeListUsersResponseItem);
        writer.writeNumberValue("totalCount", listUsersResponse.totalCount);
        writer.writeNumberValue("totalPagesCount", listUsersResponse.totalPagesCount);
        writer.writeAdditionalData(listUsersResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeListUsersResponseItem(writer: SerializationWriter, listUsersResponseItem: Partial<ListUsersResponseItem> | undefined | null = {}) : void {
    if (listUsersResponseItem) {
        writer.writeStringValue("email", listUsersResponseItem.email);
        writer.writeStringValue("firstName", listUsersResponseItem.firstName);
        writer.writeGuidValue("id", listUsersResponseItem.id);
        writer.writeStringValue("lastName", listUsersResponseItem.lastName);
        writer.writeStringValue("phoneNumber", listUsersResponseItem.phoneNumber);
        writer.writeEnumValue<Role>("role", listUsersResponseItem.role);
        writer.writeStringValue("surname", listUsersResponseItem.surname);
        writer.writeAdditionalData(listUsersResponseItem.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLoginRequest(writer: SerializationWriter, loginRequest: Partial<LoginRequest> | undefined | null = {}) : void {
    if (loginRequest) {
        writer.writeStringValue("email", loginRequest.email);
        writer.writeStringValue("password", loginRequest.password);
        writer.writeAdditionalData(loginRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeLoginResponse(writer: SerializationWriter, loginResponse: Partial<LoginResponse> | undefined | null = {}) : void {
    if (loginResponse) {
        writer.writeStringValue("token", loginResponse.token);
        writer.writeAdditionalData(loginResponse.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeNotFound(writer: SerializationWriter, notFound: Partial<NotFound> | undefined | null = {}) : void {
    if (notFound) {
        writer.writeNumberValue("statusCode", notFound.statusCode);
        writer.writeAdditionalData(notFound.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeOk(writer: SerializationWriter, ok: Partial<Ok> | undefined | null = {}) : void {
    if (ok) {
        writer.writeNumberValue("statusCode", ok.statusCode);
        writer.writeAdditionalData(ok.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateAppointmentRequest(writer: SerializationWriter, updateAppointmentRequest: Partial<UpdateAppointmentRequest> | undefined | null = {}) : void {
    if (updateAppointmentRequest) {
        writer.writeGuidValue("dentistId", updateAppointmentRequest.dentistId);
        writer.writeStringValue("duration", updateAppointmentRequest.duration);
        writer.writeGuidValue("patientId", updateAppointmentRequest.patientId);
        writer.writeDateValue("startTime", updateAppointmentRequest.startTime);
        writer.writeAdditionalData(updateAppointmentRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdatePatientRequest(writer: SerializationWriter, updatePatientRequest: Partial<UpdatePatientRequest> | undefined | null = {}) : void {
    if (updatePatientRequest) {
        writer.writeStringValue("email", updatePatientRequest.email);
        writer.writeStringValue("firstName", updatePatientRequest.firstName);
        writer.writeStringValue("lastName", updatePatientRequest.lastName);
        writer.writeStringValue("notes", updatePatientRequest.notes);
        writer.writeStringValue("phoneNumber", updatePatientRequest.phoneNumber);
        writer.writeStringValue("surname", updatePatientRequest.surname);
        writer.writeAdditionalData(updatePatientRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateServiceRequest(writer: SerializationWriter, updateServiceRequest: Partial<UpdateServiceRequest> | undefined | null = {}) : void {
    if (updateServiceRequest) {
        writer.writeStringValue("name", updateServiceRequest.name);
        writer.writeNumberValue("price", updateServiceRequest.price);
        writer.writeAdditionalData(updateServiceRequest.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateUserRequest(writer: SerializationWriter, updateUserRequest: Partial<UpdateUserRequest> | undefined | null = {}) : void {
    if (updateUserRequest) {
        writer.writeStringValue("firstName", updateUserRequest.firstName);
        writer.writeStringValue("lastName", updateUserRequest.lastName);
        writer.writeStringValue("phoneNumber", updateUserRequest.phoneNumber);
        writer.writeStringValue("surname", updateUserRequest.surname);
        writer.writeAdditionalData(updateUserRequest.additionalData);
    }
}
export interface UpdateAppointmentRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The dentistId property
     */
    dentistId?: Guid | null;
    /**
     * The duration property
     */
    duration?: string | null;
    /**
     * The patientId property
     */
    patientId?: Guid | null;
    /**
     * The startTime property
     */
    startTime?: Date | null;
}
export interface UpdatePatientRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The firstName property
     */
    firstName?: string | null;
    /**
     * The lastName property
     */
    lastName?: string | null;
    /**
     * The notes property
     */
    notes?: string | null;
    /**
     * The phoneNumber property
     */
    phoneNumber?: string | null;
    /**
     * The surname property
     */
    surname?: string | null;
}
export interface UpdateServiceRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The price property
     */
    price?: number | null;
}
export interface UpdateUserRequest extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The firstName property
     */
    firstName?: string | null;
    /**
     * The lastName property
     */
    lastName?: string | null;
    /**
     * The phoneNumber property
     */
    phoneNumber?: string | null;
    /**
     * The surname property
     */
    surname?: string | null;
}
export const AppointmentStatusObject = {
    Scheduled: "Scheduled",
    Cancelled: "Cancelled",
    Completed: "Completed",
    Paid: "Paid",
} as const;
export const RoleObject = {
    Admin: "Admin",
    Dentist: "Dentist",
    Receptionist: "Receptionist",
} as const;
/* tslint:enable */
/* eslint-enable */
